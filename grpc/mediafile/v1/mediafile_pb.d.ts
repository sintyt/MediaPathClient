// @generated by protoc-gen-es v2.2.3 with parameter "import_extension=.js"
// @generated from file mediafile/v1/mediafile.proto (package mediafile.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file mediafile/v1/mediafile.proto.
 */
export declare const file_mediafile_v1_mediafile: GenFile;

/**
 * タイムゾーン保持可能な日時メッセージです。
 *
 * @generated from message mediafile.v1.Instant
 */
export declare type Instant = Message<"mediafile.v1.Instant"> & {
  /**
   * 1970/1/1 00:00:00からの秒数
   *
   * @generated from field: int64 seconds = 1;
   */
  seconds: bigint;

  /**
   * 秒未満のナノ秒
   *
   * @generated from field: uint32 nanos = 2;
   */
  nanos: number;

  /**
   * タイムゾーンオフセット（秒単位）
   *
   * @generated from field: int32 timezone_offset = 3;
   */
  timezoneOffset: number;
};

/**
 * Describes the message mediafile.v1.Instant.
 * Use `create(InstantSchema)` to create a new message.
 */
export declare const InstantSchema: GenMessage<Instant>;

/**
 * サーバー環境メッセージです。
 *
 * @generated from message mediafile.v1.Config
 */
export declare type Config = Message<"mediafile.v1.Config"> & {
  /**
   * サーバーのURL
   *
   * @generated from field: string server_url = 1;
   */
  serverUrl: string;

  /**
   * Configファイルのファイル名(ex. .config.json)
   * ex. photo_distination/.config.json
   *
   * @generated from field: string config_path = 2;
   */
  configPath: string;

  /**
   * 写真の移動先ディレクトリ
   *
   * @generated from field: string photo_distination = 3;
   */
  photoDistination: string;

  /**
   * 対象とする画像ファイルの拡張子配列
   * ex ["jpg", "jpeg", "png"]
   *
   * @generated from field: repeated string photofile_extensions = 4;
   */
  photofileExtensions: string[];

  /**
   * 写真リスト（キャッシュ）を保存するファイル名
   * ex. photo_distination/.cache/photo_cache.json
   *
   * @generated from field: string photo_cache_path = 5;
   */
  photoCachePath: string;

  /**
   * カメラリスト（キャッシュ）を保存するファイル名
   * ex. photo_distination/.cache/camera_cache.json
   *
   * @generated from field: string camera_cache_path = 6;
   */
  cameraCachePath: string;

  /**
   * ログファイル名
   * ex. photo_distination/.log/log.json
   *
   * @generated from field: string log_path = 7;
   */
  logPath: string;

  /**
   * 画像ファイルのソースディレクトリ
   *
   * @generated from field: repeated string photo_sources = 8;
   */
  photoSources: string[];
};

/**
 * Describes the message mediafile.v1.Config.
 * Use `create(ConfigSchema)` to create a new message.
 */
export declare const ConfigSchema: GenMessage<Config>;

/**
 * 
 *
 * @generated from message mediafile.v1.SetConfigRequest
 */
export declare type SetConfigRequest = Message<"mediafile.v1.SetConfigRequest"> & {
  /**
   * @generated from field: mediafile.v1.Mode mode = 1;
   */
  mode: Mode;

  /**
   * @generated from field: mediafile.v1.Config config = 2;
   */
  config?: Config;
};

/**
 * Describes the message mediafile.v1.SetConfigRequest.
 * Use `create(SetConfigRequestSchema)` to create a new message.
 */
export declare const SetConfigRequestSchema: GenMessage<SetConfigRequest>;

/**
 * @generated from message mediafile.v1.SetConfigResponse
 */
export declare type SetConfigResponse = Message<"mediafile.v1.SetConfigResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message mediafile.v1.SetConfigResponse.
 * Use `create(SetConfigResponseSchema)` to create a new message.
 */
export declare const SetConfigResponseSchema: GenMessage<SetConfigResponse>;

/**
 * 
 *
 * @generated from message mediafile.v1.GetConfigRequest
 */
export declare type GetConfigRequest = Message<"mediafile.v1.GetConfigRequest"> & {
  /**
   * @generated from field: mediafile.v1.Mode mode = 1;
   */
  mode: Mode;
};

/**
 * Describes the message mediafile.v1.GetConfigRequest.
 * Use `create(GetConfigRequestSchema)` to create a new message.
 */
export declare const GetConfigRequestSchema: GenMessage<GetConfigRequest>;

/**
 * @generated from message mediafile.v1.GetConfigResponse
 */
export declare type GetConfigResponse = Message<"mediafile.v1.GetConfigResponse"> & {
  /**
   * @generated from field: mediafile.v1.Config config = 1;
   */
  config?: Config;
};

/**
 * Describes the message mediafile.v1.GetConfigResponse.
 * Use `create(GetConfigResponseSchema)` to create a new message.
 */
export declare const GetConfigResponseSchema: GenMessage<GetConfigResponse>;

/**
 * 写真情報メッセージ
 *
 * @generated from message mediafile.v1.Photo
 */
export declare type Photo = Message<"mediafile.v1.Photo"> & {
  /**
   * ディレクトリ及びファイル名に依存しない一意のID
   * このIDは、ファイル名が変更された場合でも変更されない
   * カメラのモデル名・SUBSEC含む撮影日時（取得不可はファイルの作成日時）及び
   * ファイルサイズをハッシュ化したもの
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * フルパス
   *
   * @generated from field: string fullpath = 2;
   */
  fullpath: string;

  /**
   * ファイルサイズ
   *
   * @generated from field: uint64 file_size = 3;
   */
  fileSize: bigint;

  /**
   * メタデータ
   *
   * @generated from field: mediafile.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * 生成されたファイル名（推奨ファイル名）
   *
   * @generated from field: string generated_filename = 5;
   */
  generatedFilename: string;
};

/**
 * Describes the message mediafile.v1.Photo.
 * Use `create(PhotoSchema)` to create a new message.
 */
export declare const PhotoSchema: GenMessage<Photo>;

/**
 * メタデータ
 *
 * @generated from message mediafile.v1.Metadata
 */
export declare type Metadata = Message<"mediafile.v1.Metadata"> & {
  /**
   * 撮影日時
   *
   * @generated from field: mediafile.v1.Instant shot_at = 1;
   */
  shotAt?: Instant;

  /**
   * メーカー名
   *
   * @generated from field: string maker = 2;
   */
  maker: string;

  /**
   * モデル名
   *
   * @generated from field: string model = 3;
   */
  model: string;
};

/**
 * Describes the message mediafile.v1.Metadata.
 * Use `create(MetadataSchema)` to create a new message.
 */
export declare const MetadataSchema: GenMessage<Metadata>;

/**
 * @generated from message mediafile.v1.GetPhotosRequest
 */
export declare type GetPhotosRequest = Message<"mediafile.v1.GetPhotosRequest"> & {
  /**
   * @generated from field: mediafile.v1.Mode mode = 1;
   */
  mode: Mode;
};

/**
 * Describes the message mediafile.v1.GetPhotosRequest.
 * Use `create(GetPhotosRequestSchema)` to create a new message.
 */
export declare const GetPhotosRequestSchema: GenMessage<GetPhotosRequest>;

/**
 * @generated from message mediafile.v1.GetPhotosResponse
 */
export declare type GetPhotosResponse = Message<"mediafile.v1.GetPhotosResponse"> & {
  /**
   * @generated from field: repeated mediafile.v1.Photo photos = 1;
   */
  photos: Photo[];
};

/**
 * Describes the message mediafile.v1.GetPhotosResponse.
 * Use `create(GetPhotosResponseSchema)` to create a new message.
 */
export declare const GetPhotosResponseSchema: GenMessage<GetPhotosResponse>;

/**
 * 
 *
 * @generated from message mediafile.v1.MovePhotosRequest
 */
export declare type MovePhotosRequest = Message<"mediafile.v1.MovePhotosRequest"> & {
  /**
   * @generated from field: string destination_directory = 1;
   */
  destinationDirectory: string;

  /**
   * @generated from field: repeated mediafile.v1.Photo photos = 2;
   */
  photos: Photo[];
};

/**
 * Describes the message mediafile.v1.MovePhotosRequest.
 * Use `create(MovePhotosRequestSchema)` to create a new message.
 */
export declare const MovePhotosRequestSchema: GenMessage<MovePhotosRequest>;

/**
 * 
 *
 * @generated from message mediafile.v1.MovePhotosResponse
 */
export declare type MovePhotosResponse = Message<"mediafile.v1.MovePhotosResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message mediafile.v1.MovePhotosResponse.
 * Use `create(MovePhotosResponseSchema)` to create a new message.
 */
export declare const MovePhotosResponseSchema: GenMessage<MovePhotosResponse>;

/**
 * @generated from message mediafile.v1.PhotoList
 */
export declare type PhotoList = Message<"mediafile.v1.PhotoList"> & {
  /**
   * @generated from field: repeated mediafile.v1.Photo photos = 1;
   */
  photos: Photo[];
};

/**
 * Describes the message mediafile.v1.PhotoList.
 * Use `create(PhotoListSchema)` to create a new message.
 */
export declare const PhotoListSchema: GenMessage<PhotoList>;

/**
 * @generated from message mediafile.v1.PhotoMap
 */
export declare type PhotoMap = Message<"mediafile.v1.PhotoMap"> & {
  /**
   * @generated from field: map<string, mediafile.v1.Photo> key_id = 1;
   */
  keyId: { [key: string]: Photo };
};

/**
 * Describes the message mediafile.v1.PhotoMap.
 * Use `create(PhotoMapSchema)` to create a new message.
 */
export declare const PhotoMapSchema: GenMessage<PhotoMap>;

/**
 * カメラ情報
 *
 * @generated from message mediafile.v1.Camera
 */
export declare type Camera = Message<"mediafile.v1.Camera"> & {
  /**
   * メーカー名
   *
   * @generated from field: string maker = 1;
   */
  maker: string;

  /**
   * モデル名
   *
   * @generated from field: string model = 2;
   */
  model: string;

  /**
   * カメラのラベル
   *
   * @generated from field: string label = 3;
   */
  label: string;

  /**
   * 撮影された写真の枚数
   *
   * @generated from field: int32 photo_count = 4;
   */
  photoCount: number;

  /**
   * 最初の撮影された写真の日時
   *
   * @generated from field: mediafile.v1.Instant first_at = 5;
   */
  firstAt?: Instant;

  /**
   * 最後に撮影された写真の日時
   *
   * @generated from field: mediafile.v1.Instant last_at = 6;
   */
  lastAt?: Instant;
};

/**
 * Describes the message mediafile.v1.Camera.
 * Use `create(CameraSchema)` to create a new message.
 */
export declare const CameraSchema: GenMessage<Camera>;

/**
 * @generated from message mediafile.v1.GetCamerasRequest
 */
export declare type GetCamerasRequest = Message<"mediafile.v1.GetCamerasRequest"> & {
  /**
   * @generated from field: mediafile.v1.Mode mode = 1;
   */
  mode: Mode;
};

/**
 * Describes the message mediafile.v1.GetCamerasRequest.
 * Use `create(GetCamerasRequestSchema)` to create a new message.
 */
export declare const GetCamerasRequestSchema: GenMessage<GetCamerasRequest>;

/**
 * @generated from message mediafile.v1.GetCamerasResponse
 */
export declare type GetCamerasResponse = Message<"mediafile.v1.GetCamerasResponse"> & {
  /**
   * @generated from field: mediafile.v1.CameraMap camera_map = 1;
   */
  cameraMap?: CameraMap;
};

/**
 * Describes the message mediafile.v1.GetCamerasResponse.
 * Use `create(GetCamerasResponseSchema)` to create a new message.
 */
export declare const GetCamerasResponseSchema: GenMessage<GetCamerasResponse>;

/**
 * Key: カメラモデル名, Value: Camera
 *
 * @generated from message mediafile.v1.CameraMap
 */
export declare type CameraMap = Message<"mediafile.v1.CameraMap"> & {
  /**
   * @generated from field: map<string, mediafile.v1.Camera> by_model = 1;
   */
  byModel: { [key: string]: Camera };
};

/**
 * Describes the message mediafile.v1.CameraMap.
 * Use `create(CameraMapSchema)` to create a new message.
 */
export declare const CameraMapSchema: GenMessage<CameraMap>;

/**
 * @generated from message mediafile.v1.CameraList
 */
export declare type CameraList = Message<"mediafile.v1.CameraList"> & {
  /**
   * @generated from field: repeated mediafile.v1.Camera cameras = 1;
   */
  cameras: Camera[];
};

/**
 * Describes the message mediafile.v1.CameraList.
 * Use `create(CameraListSchema)` to create a new message.
 */
export declare const CameraListSchema: GenMessage<CameraList>;

/**
 * ログのメッセージです。
 *
 * @generated from message mediafile.v1.Log
 */
export declare type Log = Message<"mediafile.v1.Log"> & {
  /**
   * ログ作成日
   *
   * @generated from field: mediafile.v1.Instant created_at = 1;
   */
  createdAt?: Instant;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message mediafile.v1.Log.
 * Use `create(LogSchema)` to create a new message.
 */
export declare const LogSchema: GenMessage<Log>;

/**
 * ログリストの汎用メッセージです。
 *
 * @generated from message mediafile.v1.LogList
 */
export declare type LogList = Message<"mediafile.v1.LogList"> & {
  /**
   * @generated from field: repeated mediafile.v1.Log logs = 1;
   */
  logs: Log[];
};

/**
 * Describes the message mediafile.v1.LogList.
 * Use `create(LogListSchema)` to create a new message.
 */
export declare const LogListSchema: GenMessage<LogList>;

/**
 * GetLogのリクエストメッセージです。
 *
 * @generated from message mediafile.v1.GetLogRequest
 */
export declare type GetLogRequest = Message<"mediafile.v1.GetLogRequest"> & {
  /**
   * @generated from field: mediafile.v1.Mode mode = 1;
   */
  mode: Mode;
};

/**
 * Describes the message mediafile.v1.GetLogRequest.
 * Use `create(GetLogRequestSchema)` to create a new message.
 */
export declare const GetLogRequestSchema: GenMessage<GetLogRequest>;

/**
 * @generated from message mediafile.v1.GetLogsResponse
 */
export declare type GetLogsResponse = Message<"mediafile.v1.GetLogsResponse"> & {
  /**
   * @generated from field: repeated mediafile.v1.Log logs = 1;
   */
  logs: Log[];
};

/**
 * Describes the message mediafile.v1.GetLogsResponse.
 * Use `create(GetLogsResponseSchema)` to create a new message.
 */
export declare const GetLogsResponseSchema: GenMessage<GetLogsResponse>;

/**
 * 各種モードの列挙型です。
 *
 * @generated from enum mediafile.v1.Mode
 */
export enum Mode {
  /**
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ファイルから取得、ファイルアクセスありキャッシュの更新
   *
   * @generated from enum value: MODE_FILE = 1;
   */
  FILE = 1,

  /**
   * キャッシュのみ、ファイルアクセスしない
   *
   * @generated from enum value: MODE_CACHE = 2;
   */
  CACHE = 2,

  /**
   * テスト用
   *
   * @generated from enum value: MODE_TEST = 3;
   */
  TEST = 3,
}

/**
 * Describes the enum mediafile.v1.Mode.
 */
export declare const ModeSchema: GenEnum<Mode>;

/**
 * 
 *
 * @generated from service mediafile.v1.MediafileService
 */
export declare const MediafileService: GenService<{
  /**
   * コンフィギュレーションを取得します。
   *
   * @generated from rpc mediafile.v1.MediafileService.SetConfig
   */
  setConfig: {
    methodKind: "unary";
    input: typeof SetConfigRequestSchema;
    output: typeof SetConfigResponseSchema;
  },
  /**
   * コンフィギュレーションを設定します。
   *
   * @generated from rpc mediafile.v1.MediafileService.GetConfig
   */
  getConfig: {
    methodKind: "unary";
    input: typeof GetConfigRequestSchema;
    output: typeof GetConfigResponseSchema;
  },
  /**
   * 写真情報を取得します。
   *
   * @generated from rpc mediafile.v1.MediafileService.GetPhotos
   */
  getPhotos: {
    methodKind: "unary";
    input: typeof GetPhotosRequestSchema;
    output: typeof GetPhotosResponseSchema;
  },
  /**
   * 写真を移動します。
   *
   * @generated from rpc mediafile.v1.MediafileService.MovePhotos
   */
  movePhotos: {
    methodKind: "unary";
    input: typeof MovePhotosRequestSchema;
    output: typeof MovePhotosResponseSchema;
  },
  /**
   * カメラ情報を取得します。
   *
   * @generated from rpc mediafile.v1.MediafileService.GetCameras
   */
  getCameras: {
    methodKind: "unary";
    input: typeof GetCamerasRequestSchema;
    output: typeof GetCamerasResponseSchema;
  },
  /**
   * ログを取得します。
   *
   * @generated from rpc mediafile.v1.MediafileService.GetLogs
   */
  getLogs: {
    methodKind: "unary";
    input: typeof GetLogRequestSchema;
    output: typeof GetLogsResponseSchema;
  },
}>;

