// @generated by protoc-gen-es v2.2.3 with parameter "import_extension=.js"
// @generated from file mediafile/v1/mediafile.proto (package mediafile.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file mediafile/v1/mediafile.proto.
 */
export declare const file_mediafile_v1_mediafile: GenFile;

/**
 * @generated from message mediafile.v1.SavePhotoCacheRequest
 */
export declare type SavePhotoCacheRequest = Message<"mediafile.v1.SavePhotoCacheRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.SavePhotoCacheRequest.
 * Use `create(SavePhotoCacheRequestSchema)` to create a new message.
 */
export declare const SavePhotoCacheRequestSchema: GenMessage<SavePhotoCacheRequest>;

/**
 * @generated from message mediafile.v1.SavePhotoCacheResponse
 */
export declare type SavePhotoCacheResponse = Message<"mediafile.v1.SavePhotoCacheResponse"> & {
  /**
   * @generated from field: mediafile.v1.ResponseStatus status = 1;
   */
  status: ResponseStatus;
};

/**
 * Describes the message mediafile.v1.SavePhotoCacheResponse.
 * Use `create(SavePhotoCacheResponseSchema)` to create a new message.
 */
export declare const SavePhotoCacheResponseSchema: GenMessage<SavePhotoCacheResponse>;

/**
 * @generated from message mediafile.v1.LoadPhotoCacheRequest
 */
export declare type LoadPhotoCacheRequest = Message<"mediafile.v1.LoadPhotoCacheRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.LoadPhotoCacheRequest.
 * Use `create(LoadPhotoCacheRequestSchema)` to create a new message.
 */
export declare const LoadPhotoCacheRequestSchema: GenMessage<LoadPhotoCacheRequest>;

/**
 * @generated from message mediafile.v1.LoadPhotoCacheResponse
 */
export declare type LoadPhotoCacheResponse = Message<"mediafile.v1.LoadPhotoCacheResponse"> & {
  /**
   * @generated from field: mediafile.v1.ResponseStatus status = 1;
   */
  status: ResponseStatus;
};

/**
 * Describes the message mediafile.v1.LoadPhotoCacheResponse.
 * Use `create(LoadPhotoCacheResponseSchema)` to create a new message.
 */
export declare const LoadPhotoCacheResponseSchema: GenMessage<LoadPhotoCacheResponse>;

/**
 * @generated from message mediafile.v1.SaveCameraCacheRequest
 */
export declare type SaveCameraCacheRequest = Message<"mediafile.v1.SaveCameraCacheRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.SaveCameraCacheRequest.
 * Use `create(SaveCameraCacheRequestSchema)` to create a new message.
 */
export declare const SaveCameraCacheRequestSchema: GenMessage<SaveCameraCacheRequest>;

/**
 * @generated from message mediafile.v1.SaveCameraCacheResponse
 */
export declare type SaveCameraCacheResponse = Message<"mediafile.v1.SaveCameraCacheResponse"> & {
  /**
   * @generated from field: mediafile.v1.ResponseStatus status = 1;
   */
  status: ResponseStatus;
};

/**
 * Describes the message mediafile.v1.SaveCameraCacheResponse.
 * Use `create(SaveCameraCacheResponseSchema)` to create a new message.
 */
export declare const SaveCameraCacheResponseSchema: GenMessage<SaveCameraCacheResponse>;

/**
 * @generated from message mediafile.v1.LoadCameraCacheRequest
 */
export declare type LoadCameraCacheRequest = Message<"mediafile.v1.LoadCameraCacheRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.LoadCameraCacheRequest.
 * Use `create(LoadCameraCacheRequestSchema)` to create a new message.
 */
export declare const LoadCameraCacheRequestSchema: GenMessage<LoadCameraCacheRequest>;

/**
 * @generated from message mediafile.v1.LoadCameraCacheResponse
 */
export declare type LoadCameraCacheResponse = Message<"mediafile.v1.LoadCameraCacheResponse"> & {
  /**
   * @generated from field: mediafile.v1.ResponseStatus status = 1;
   */
  status: ResponseStatus;
};

/**
 * Describes the message mediafile.v1.LoadCameraCacheResponse.
 * Use `create(LoadCameraCacheResponseSchema)` to create a new message.
 */
export declare const LoadCameraCacheResponseSchema: GenMessage<LoadCameraCacheResponse>;

/**
 * @generated from message mediafile.v1.SaveLogRequest
 */
export declare type SaveLogRequest = Message<"mediafile.v1.SaveLogRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.SaveLogRequest.
 * Use `create(SaveLogRequestSchema)` to create a new message.
 */
export declare const SaveLogRequestSchema: GenMessage<SaveLogRequest>;

/**
 * @generated from message mediafile.v1.SaveLogResponse
 */
export declare type SaveLogResponse = Message<"mediafile.v1.SaveLogResponse"> & {
  /**
   * @generated from field: mediafile.v1.ResponseStatus status = 1;
   */
  status: ResponseStatus;
};

/**
 * Describes the message mediafile.v1.SaveLogResponse.
 * Use `create(SaveLogResponseSchema)` to create a new message.
 */
export declare const SaveLogResponseSchema: GenMessage<SaveLogResponse>;

/**
 * @generated from message mediafile.v1.LoadLogRequest
 */
export declare type LoadLogRequest = Message<"mediafile.v1.LoadLogRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.LoadLogRequest.
 * Use `create(LoadLogRequestSchema)` to create a new message.
 */
export declare const LoadLogRequestSchema: GenMessage<LoadLogRequest>;

/**
 * @generated from message mediafile.v1.LoadLogResponse
 */
export declare type LoadLogResponse = Message<"mediafile.v1.LoadLogResponse"> & {
  /**
   * @generated from field: mediafile.v1.ResponseStatus status = 1;
   */
  status: ResponseStatus;
};

/**
 * Describes the message mediafile.v1.LoadLogResponse.
 * Use `create(LoadLogResponseSchema)` to create a new message.
 */
export declare const LoadLogResponseSchema: GenMessage<LoadLogResponse>;

/**
 * タイムゾーン保持可能な日時メッセージです。
 *
 * @generated from message mediafile.v1.Instant
 */
export declare type Instant = Message<"mediafile.v1.Instant"> & {
  /**
   * 1970/1/1 00:00:00からの秒数
   *
   * @generated from field: int64 seconds = 1;
   */
  seconds: bigint;

  /**
   * 秒未満のナノ秒
   *
   * @generated from field: uint32 nanos = 2;
   */
  nanos: number;

  /**
   * タイムゾーンオフセット（秒単位）
   *
   * @generated from field: int32 timezone_offset = 3;
   */
  timezoneOffset: number;
};

/**
 * Describes the message mediafile.v1.Instant.
 * Use `create(InstantSchema)` to create a new message.
 */
export declare const InstantSchema: GenMessage<Instant>;

/**
 * フォルダー読み込みリクエストメッセージです。
 *
 * @generated from message mediafile.v1.ReadFolderRequest
 */
export declare type ReadFolderRequest = Message<"mediafile.v1.ReadFolderRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;

  /**
   * @generated from field: string folder = 2;
   */
  folder: string;
};

/**
 * Describes the message mediafile.v1.ReadFolderRequest.
 * Use `create(ReadFolderRequestSchema)` to create a new message.
 */
export declare const ReadFolderRequestSchema: GenMessage<ReadFolderRequest>;

/**
 * フォルダー読み込みレスポンスメッセージです。
 *
 * @generated from message mediafile.v1.ReadFolderResponse
 */
export declare type ReadFolderResponse = Message<"mediafile.v1.ReadFolderResponse"> & {
  /**
   * @generated from field: repeated string folders = 1;
   */
  folders: string[];

  /**
   * @generated from field: repeated string files = 2;
   */
  files: string[];
};

/**
 * Describes the message mediafile.v1.ReadFolderResponse.
 * Use `create(ReadFolderResponseSchema)` to create a new message.
 */
export declare const ReadFolderResponseSchema: GenMessage<ReadFolderResponse>;

/**
 * サーバー環境メッセージです。
 *
 * @generated from message mediafile.v1.Config
 */
export declare type Config = Message<"mediafile.v1.Config"> & {
  /**
   * サーバーのURL
   *
   * @generated from field: string server_url = 1;
   */
  serverUrl: string;

  /**
   * Configファイルのフルパス文字列
   *
   * @generated from field: string config_file = 2;
   */
  configFile: string;

  /**
   * 管理する写真フォルダー
   *
   * @generated from field: string managed_photo_folder = 3;
   */
  managedPhotoFolder: string;

  /**
   * 対象とする画像ファイルの拡張子配列
   * ex ["jpg", "jpeg", "png"]
   *
   * @generated from field: repeated string photofile_extensions = 4;
   */
  photofileExtensions: string[];

  /**
   * 写真情報ののキャッシュを保存するファイル名
   * ex. [managed_photo_folder]/.cache/photo_cache.json
   *
   * @generated from field: string photo_cache_file = 5;
   */
  photoCacheFile: string;

  /**
   * カメラ情報のキャッシュを保存するファイル名
   * ex. [managed_photo_folder]/.cache/camera_cache.json
   *
   * @generated from field: string camera_cache_file = 6;
   */
  cameraCacheFile: string;

  /**
   * ログファイル名
   * ex. [managed_photo_folder]/.log/log.json
   *
   * @generated from field: string log_file = 7;
   */
  logFile: string;
};

/**
 * Describes the message mediafile.v1.Config.
 * Use `create(ConfigSchema)` to create a new message.
 */
export declare const ConfigSchema: GenMessage<Config>;

/**
 * 
 *
 * @generated from message mediafile.v1.ReadConfigRequest
 */
export declare type ReadConfigRequest = Message<"mediafile.v1.ReadConfigRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.ReadConfigRequest.
 * Use `create(ReadConfigRequestSchema)` to create a new message.
 */
export declare const ReadConfigRequestSchema: GenMessage<ReadConfigRequest>;

/**
 * @generated from message mediafile.v1.ReadConfigResponse
 */
export declare type ReadConfigResponse = Message<"mediafile.v1.ReadConfigResponse"> & {
  /**
   * @generated from field: mediafile.v1.Config config = 1;
   */
  config?: Config;
};

/**
 * Describes the message mediafile.v1.ReadConfigResponse.
 * Use `create(ReadConfigResponseSchema)` to create a new message.
 */
export declare const ReadConfigResponseSchema: GenMessage<ReadConfigResponse>;

/**
 * 
 *
 * @generated from message mediafile.v1.WriteConfigRequest
 */
export declare type WriteConfigRequest = Message<"mediafile.v1.WriteConfigRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;

  /**
   * @generated from field: mediafile.v1.Config config = 2;
   */
  config?: Config;
};

/**
 * Describes the message mediafile.v1.WriteConfigRequest.
 * Use `create(WriteConfigRequestSchema)` to create a new message.
 */
export declare const WriteConfigRequestSchema: GenMessage<WriteConfigRequest>;

/**
 * @generated from message mediafile.v1.WriteConfigResponse
 */
export declare type WriteConfigResponse = Message<"mediafile.v1.WriteConfigResponse"> & {
  /**
   * @generated from field: mediafile.v1.ResponseStatus status = 1;
   */
  status: ResponseStatus;
};

/**
 * Describes the message mediafile.v1.WriteConfigResponse.
 * Use `create(WriteConfigResponseSchema)` to create a new message.
 */
export declare const WriteConfigResponseSchema: GenMessage<WriteConfigResponse>;

/**
 * 写真情報メッセージ
 *
 * @generated from message mediafile.v1.Photo
 */
export declare type Photo = Message<"mediafile.v1.Photo"> & {
  /**
   * フォルダー及びファイル名に依存しない一意のID
   * このIDは、ファイル名が変更された場合でも変更されない
   * カメラのモデル名・SUBSEC含む撮影日時（取得不可はファイルの作成日時）及び
   * ファイルサイズをハッシュ化したもの
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * ファイルパス
   *
   * @generated from field: string file_path = 2;
   */
  filePath: string;

  /**
   * ファイルサイズ
   *
   * @generated from field: uint64 file_size = 3;
   */
  fileSize: bigint;

  /**
   * メタデータ
   *
   * @generated from field: mediafile.v1.Metadata metadata = 4;
   */
  metadata?: Metadata;

  /**
   * 推奨フルパス
   *
   * @generated from field: string unique_file_path = 5;
   */
  uniqueFilePath: string;
};

/**
 * Describes the message mediafile.v1.Photo.
 * Use `create(PhotoSchema)` to create a new message.
 */
export declare const PhotoSchema: GenMessage<Photo>;

/**
 * メタデータ
 *
 * @generated from message mediafile.v1.Metadata
 */
export declare type Metadata = Message<"mediafile.v1.Metadata"> & {
  /**
   * 撮影日時
   *
   * @generated from field: mediafile.v1.Instant shot_at = 1;
   */
  shotAt?: Instant;

  /**
   * メーカー名
   *
   * @generated from field: string maker = 2;
   */
  maker: string;

  /**
   * モデル名
   *
   * @generated from field: string model = 3;
   */
  model: string;
};

/**
 * Describes the message mediafile.v1.Metadata.
 * Use `create(MetadataSchema)` to create a new message.
 */
export declare const MetadataSchema: GenMessage<Metadata>;

/**
 * @generated from message mediafile.v1.GetPhotosRequest
 */
export declare type GetPhotosRequest = Message<"mediafile.v1.GetPhotosRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;

  /**
   * @generated from field: string source_path = 2;
   */
  sourcePath: string;
};

/**
 * Describes the message mediafile.v1.GetPhotosRequest.
 * Use `create(GetPhotosRequestSchema)` to create a new message.
 */
export declare const GetPhotosRequestSchema: GenMessage<GetPhotosRequest>;

/**
 * @generated from message mediafile.v1.GetPhotosResponse
 */
export declare type GetPhotosResponse = Message<"mediafile.v1.GetPhotosResponse"> & {
  /**
   * @generated from field: repeated mediafile.v1.Photo photos = 1;
   */
  photos: Photo[];
};

/**
 * Describes the message mediafile.v1.GetPhotosResponse.
 * Use `create(GetPhotosResponseSchema)` to create a new message.
 */
export declare const GetPhotosResponseSchema: GenMessage<GetPhotosResponse>;

/**
 * 
 *
 * @generated from message mediafile.v1.MovePhotosRequest
 */
export declare type MovePhotosRequest = Message<"mediafile.v1.MovePhotosRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[];
};

/**
 * Describes the message mediafile.v1.MovePhotosRequest.
 * Use `create(MovePhotosRequestSchema)` to create a new message.
 */
export declare const MovePhotosRequestSchema: GenMessage<MovePhotosRequest>;

/**
 * 
 *
 * @generated from message mediafile.v1.MovePhotosResponse
 */
export declare type MovePhotosResponse = Message<"mediafile.v1.MovePhotosResponse"> & {
  /**
   * @generated from field: mediafile.v1.ResponseStatus status = 1;
   */
  status: ResponseStatus;
};

/**
 * Describes the message mediafile.v1.MovePhotosResponse.
 * Use `create(MovePhotosResponseSchema)` to create a new message.
 */
export declare const MovePhotosResponseSchema: GenMessage<MovePhotosResponse>;

/**
 * @generated from message mediafile.v1.PhotoList
 */
export declare type PhotoList = Message<"mediafile.v1.PhotoList"> & {
  /**
   * @generated from field: repeated mediafile.v1.Photo photos = 1;
   */
  photos: Photo[];
};

/**
 * Describes the message mediafile.v1.PhotoList.
 * Use `create(PhotoListSchema)` to create a new message.
 */
export declare const PhotoListSchema: GenMessage<PhotoList>;

/**
 * @generated from message mediafile.v1.PhotoMap
 */
export declare type PhotoMap = Message<"mediafile.v1.PhotoMap"> & {
  /**
   * @generated from field: map<string, mediafile.v1.Photo> by_id = 1;
   */
  byId: { [key: string]: Photo };
};

/**
 * Describes the message mediafile.v1.PhotoMap.
 * Use `create(PhotoMapSchema)` to create a new message.
 */
export declare const PhotoMapSchema: GenMessage<PhotoMap>;

/**
 * カメラ情報
 *
 * @generated from message mediafile.v1.Camera
 */
export declare type Camera = Message<"mediafile.v1.Camera"> & {
  /**
   * メーカー名
   *
   * @generated from field: string maker = 1;
   */
  maker: string;

  /**
   * モデル名
   *
   * @generated from field: string model = 2;
   */
  model: string;

  /**
   * カメラのラベル
   *
   * @generated from field: string label = 3;
   */
  label: string;

  /**
   * 撮影された写真の枚数
   *
   * @generated from field: int32 photo_count = 4;
   */
  photoCount: number;

  /**
   * 最初の撮影された写真の日時
   *
   * @generated from field: mediafile.v1.Instant first_at = 5;
   */
  firstAt?: Instant;

  /**
   * 最後に撮影された写真の日時
   *
   * @generated from field: mediafile.v1.Instant last_at = 6;
   */
  lastAt?: Instant;
};

/**
 * Describes the message mediafile.v1.Camera.
 * Use `create(CameraSchema)` to create a new message.
 */
export declare const CameraSchema: GenMessage<Camera>;

/**
 * @generated from message mediafile.v1.GetCamerasRequest
 */
export declare type GetCamerasRequest = Message<"mediafile.v1.GetCamerasRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.GetCamerasRequest.
 * Use `create(GetCamerasRequestSchema)` to create a new message.
 */
export declare const GetCamerasRequestSchema: GenMessage<GetCamerasRequest>;

/**
 * @generated from message mediafile.v1.GetCamerasResponse
 */
export declare type GetCamerasResponse = Message<"mediafile.v1.GetCamerasResponse"> & {
  /**
   * @generated from field: mediafile.v1.CameraMap camera_map = 1;
   */
  cameraMap?: CameraMap;
};

/**
 * Describes the message mediafile.v1.GetCamerasResponse.
 * Use `create(GetCamerasResponseSchema)` to create a new message.
 */
export declare const GetCamerasResponseSchema: GenMessage<GetCamerasResponse>;

/**
 * Key: カメラモデル名, Value: Camera
 *
 * @generated from message mediafile.v1.CameraMap
 */
export declare type CameraMap = Message<"mediafile.v1.CameraMap"> & {
  /**
   * @generated from field: map<string, mediafile.v1.Camera> by_model = 1;
   */
  byModel: { [key: string]: Camera };
};

/**
 * Describes the message mediafile.v1.CameraMap.
 * Use `create(CameraMapSchema)` to create a new message.
 */
export declare const CameraMapSchema: GenMessage<CameraMap>;

/**
 * @generated from message mediafile.v1.CameraList
 */
export declare type CameraList = Message<"mediafile.v1.CameraList"> & {
  /**
   * @generated from field: repeated mediafile.v1.Camera cameras = 1;
   */
  cameras: Camera[];
};

/**
 * Describes the message mediafile.v1.CameraList.
 * Use `create(CameraListSchema)` to create a new message.
 */
export declare const CameraListSchema: GenMessage<CameraList>;

/**
 * ログのメッセージです。
 *
 * @generated from message mediafile.v1.Log
 */
export declare type Log = Message<"mediafile.v1.Log"> & {
  /**
   * ログ作成日
   *
   * @generated from field: mediafile.v1.Instant created_at = 1;
   */
  createdAt?: Instant;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message mediafile.v1.Log.
 * Use `create(LogSchema)` to create a new message.
 */
export declare const LogSchema: GenMessage<Log>;

/**
 * ログリストの汎用メッセージです。
 *
 * @generated from message mediafile.v1.LogList
 */
export declare type LogList = Message<"mediafile.v1.LogList"> & {
  /**
   * @generated from field: repeated mediafile.v1.Log log = 1;
   */
  log: Log[];
};

/**
 * Describes the message mediafile.v1.LogList.
 * Use `create(LogListSchema)` to create a new message.
 */
export declare const LogListSchema: GenMessage<LogList>;

/**
 * GetLogのリクエストメッセージです。
 *
 * @generated from message mediafile.v1.GetLogRequest
 */
export declare type GetLogRequest = Message<"mediafile.v1.GetLogRequest"> & {
  /**
   * @generated from field: mediafile.v1.RequestMode mode = 1;
   */
  mode: RequestMode;
};

/**
 * Describes the message mediafile.v1.GetLogRequest.
 * Use `create(GetLogRequestSchema)` to create a new message.
 */
export declare const GetLogRequestSchema: GenMessage<GetLogRequest>;

/**
 * @generated from message mediafile.v1.GetLogResponse
 */
export declare type GetLogResponse = Message<"mediafile.v1.GetLogResponse"> & {
  /**
   * @generated from field: repeated mediafile.v1.Log log = 1;
   */
  log: Log[];
};

/**
 * Describes the message mediafile.v1.GetLogResponse.
 * Use `create(GetLogResponseSchema)` to create a new message.
 */
export declare const GetLogResponseSchema: GenMessage<GetLogResponse>;

/**
 * リクエストモードの列挙型です。
 *
 * @generated from enum mediafile.v1.RequestMode
 */
export enum RequestMode {
  /**
   * @generated from enum value: DEFAULT_MODE = 0;
   */
  DEFAULT_MODE = 0,

  /**
   * ファイルから取得、ファイルアクセスありキャッシュの更新
   *
   * @generated from enum value: FILE_MODE = 1;
   */
  FILE_MODE = 1,

  /**
   * キャッシュのみ、ファイルアクセスしない
   *
   * @generated from enum value: CACHE_MODE = 2;
   */
  CACHE_MODE = 2,

  /**
   * テスト用
   *
   * @generated from enum value: TEST_MODE = 3;
   */
  TEST_MODE = 3,
}

/**
 * Describes the enum mediafile.v1.RequestMode.
 */
export declare const RequestModeSchema: GenEnum<RequestMode>;

/**
 * レスポンスステータスの列挙型です。
 *
 * @generated from enum mediafile.v1.ResponseStatus
 */
export enum ResponseStatus {
  /**
   * 正常終了
   *
   * @generated from enum value: STATUS_OK = 0;
   */
  STATUS_OK = 0,

  /**
   * エラー
   *
   * @generated from enum value: STATUS_ERROR = 1;
   */
  STATUS_ERROR = 1,
}

/**
 * Describes the enum mediafile.v1.ResponseStatus.
 */
export declare const ResponseStatusSchema: GenEnum<ResponseStatus>;

/**
 * 
 *
 * @generated from service mediafile.v1.MediafileService
 */
export declare const MediafileService: GenService<{
  /**
   * 
   *
   * @generated from rpc mediafile.v1.MediafileService.ReadFolder
   */
  readFolder: {
    methodKind: "unary";
    input: typeof ReadFolderRequestSchema;
    output: typeof ReadFolderResponseSchema;
  },
  /**
   * コンフィギュレーションを読み込みます。
   *
   * @generated from rpc mediafile.v1.MediafileService.ReadConfig
   */
  readConfig: {
    methodKind: "unary";
    input: typeof ReadConfigRequestSchema;
    output: typeof ReadConfigResponseSchema;
  },
  /**
   * コンフィギュレーションを保存します。
   *
   * @generated from rpc mediafile.v1.MediafileService.WriteConfig
   */
  writeConfig: {
    methodKind: "unary";
    input: typeof WriteConfigRequestSchema;
    output: typeof WriteConfigResponseSchema;
  },
  /**
   * 写真のキャッシュ情報を保存します。
   *
   * @generated from rpc mediafile.v1.MediafileService.SavePhotoCache
   */
  savePhotoCache: {
    methodKind: "unary";
    input: typeof SavePhotoCacheRequestSchema;
    output: typeof SavePhotoCacheResponseSchema;
  },
  /**
   * 写真のキャッシュ情報を読み込みます。
   *
   * @generated from rpc mediafile.v1.MediafileService.LoadPhotoCache
   */
  loadPhotoCache: {
    methodKind: "unary";
    input: typeof LoadPhotoCacheRequestSchema;
    output: typeof LoadPhotoCacheResponseSchema;
  },
  /**
   * カメラのキャッシュ情報を保存します。
   *
   * @generated from rpc mediafile.v1.MediafileService.SaveCameraCache
   */
  saveCameraCache: {
    methodKind: "unary";
    input: typeof SaveCameraCacheRequestSchema;
    output: typeof SaveCameraCacheResponseSchema;
  },
  /**
   * カメラのキャッシュ情報を読み込みます。
   *
   * @generated from rpc mediafile.v1.MediafileService.LoadCameraCache
   */
  loadCameraCache: {
    methodKind: "unary";
    input: typeof LoadCameraCacheRequestSchema;
    output: typeof LoadCameraCacheResponseSchema;
  },
  /**
   * ログを存します。
   *
   * @generated from rpc mediafile.v1.MediafileService.SaveLog
   */
  saveLog: {
    methodKind: "unary";
    input: typeof SaveLogRequestSchema;
    output: typeof SaveLogResponseSchema;
  },
  /**
   * ログを読み込みます。
   *
   * @generated from rpc mediafile.v1.MediafileService.LoadLog
   */
  loadLog: {
    methodKind: "unary";
    input: typeof LoadLogRequestSchema;
    output: typeof LoadLogResponseSchema;
  },
  /**
   * 写真情報を取得します。
   *
   * @generated from rpc mediafile.v1.MediafileService.GetPhotos
   */
  getPhotos: {
    methodKind: "unary";
    input: typeof GetPhotosRequestSchema;
    output: typeof GetPhotosResponseSchema;
  },
  /**
   * 写真を移動します。
   *
   * @generated from rpc mediafile.v1.MediafileService.MovePhotos
   */
  movePhotos: {
    methodKind: "unary";
    input: typeof MovePhotosRequestSchema;
    output: typeof MovePhotosResponseSchema;
  },
  /**
   * カメラ情報を取得します。
   *
   * @generated from rpc mediafile.v1.MediafileService.GetCameras
   */
  getCameras: {
    methodKind: "unary";
    input: typeof GetCamerasRequestSchema;
    output: typeof GetCamerasResponseSchema;
  },
  /**
   * ログを取得します。
   *
   * @generated from rpc mediafile.v1.MediafileService.GetLog
   */
  getLog: {
    methodKind: "unary";
    input: typeof GetLogRequestSchema;
    output: typeof GetLogResponseSchema;
  },
}>;

